import argparse
import sys
import subprocess
import textwrap

try:
    from Bio import SeqIO
except:
    print("SeqIO module is not installed! Please install SeqIO and try again.")
    sys.exit()

try:
    import tqdm
except:
    print("tqdm module is not installed! Please install tqdm and try again.")
    sys.exit()

parser = argparse.ArgumentParser(prog='python cdhit_cluster_fetch.py',
                                 formatter_class=argparse.RawDescriptionHelpFormatter,
                                 epilog=textwrap.dedent('''\

# cdhit_cluster_fetch

Author: Murat Buyukyoruk

        cdhit_cluster_fetch help:

This script is developed to fetch sequences and generates individual cluster fasta outputs by using the CD-HIT .clstr output to fetch. 

SeqIO package from Bio is required to fetch sequences. Additionally, tqdm is required to provide a progress bar since some multifasta files can contain long and many sequences.

Syntax:

        python cdhit_cluster_fetch.py -i demo.fasta -l demo_sub_list.txt -o demo_sub_list.fasta

seq_fetch dependencies:

Bio module and SeqIO available in this package      refer to https://biopython.org/wiki/Download

tqdm                                                refer to https://pypi.org/project/tqdm/

Input Paramaters (REQUIRED):
----------------------------
	-i/--input		FASTA			Specify a fasta file. FASTA file requires headers starting with accession number. (i.e. >NZ_CP006019 [fullname])

	-l/--list		List			Specify a .clstr file generated by CD-HIT.

Basic Options:
--------------
	-h/--help		HELP			Shows this help text and exits the run.

      	'''))
parser.add_argument('-i', '--input', required=True, type=str, dest='filename',
                    help='Specify a original fasta file.\n')
parser.add_argument('-l', '--list', required=True, type=str, dest='list',
                    help='Specify a CD-HIT .clstr file.\n')

results = parser.parse_args()
filename = results.filename
list = results.list

proc = subprocess.Popen("wc -l < " + list, shell=True, stdout=subprocess.PIPE, text=True)
length = int(proc.communicate()[0].split('\n')[0])

with tqdm.tqdm(range(length)) as pbar:
    pbar.set_description('Writing...')
    with open(list, 'r') as file:
        for line in file:
            pbar.update()
            if len(line.split()) != 0:
                if line[0] == ">":
                    cluster = line.split('>')[1].split('\n')[0].replace(" ", "_")
                    out = filename.split(".fasta")[0] + "_" + cluster + ".fasta"
                else:
                    acc = line.split('>')[1].split('...')[0]

                    for record in SeqIO.parse(filename, "fasta"):
                        if acc in record.description:
                            f = open(out, 'a')
                            sys.stdout = f
                            print(record.format("fasta"))